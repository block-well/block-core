{
  "address": "0xC064B2b99F758B67368529FE95f16DfBEDa713Df",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "keeper",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        }
      ],
      "name": "Cooldown",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "btcAddress",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxSatoshi",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "keepers",
          "type": "address[]"
        }
      ],
      "name": "GroupAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "btcAddress",
          "type": "string"
        }
      ],
      "name": "GroupDeleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "btcAddress",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "receiptId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountInSatoshi",
          "type": "uint256"
        }
      ],
      "name": "MintRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "receiptId",
          "type": "bytes32"
        }
      ],
      "name": "MintVerified",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "EIP712_DOMAIN_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "KEEPER_COOLDOWN",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "btcAddress",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxSatoshi",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "keepers",
          "type": "address[]"
        }
      ],
      "name": "addGroup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chainId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "keeper",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chillTime",
          "type": "uint256"
        }
      ],
      "name": "chill",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "btcAddress",
          "type": "string"
        }
      ],
      "name": "deleteGroup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eBTC",
      "outputs": [
        {
          "internalType": "contract IEBTC",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "keeper",
          "type": "address"
        }
      ],
      "name": "getCooldownTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "btcAddress",
          "type": "string"
        }
      ],
      "name": "getGroup",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "btcAddress",
          "type": "string"
        }
      ],
      "name": "getGroupAllowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "receiptId",
          "type": "bytes32"
        }
      ],
      "name": "getReceipt",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountInSatoshi",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "createTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "txId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "height",
              "type": "uint256"
            },
            {
              "internalType": "enum IDeCusSystem.Status",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "btcAddress",
              "type": "string"
            }
          ],
          "internalType": "struct IDeCusSystem.Receipt",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "btcAddress",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "identifier",
          "type": "uint256"
        }
      ],
      "name": "getReceiptId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_eBTC",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keeperRegistry",
      "outputs": [
        {
          "internalType": "contract IKeeperRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "btcAddress",
          "type": "string"
        }
      ],
      "name": "listGroupKeeper",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minKeeperSatoshi",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "message",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "packedV",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "recoverSigner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "btcAddress",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "amountInSatoshi",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "identifier",
          "type": "uint256"
        }
      ],
      "name": "requestMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "verified",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "receiptId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "txId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "height",
              "type": "uint256"
            }
          ],
          "internalType": "struct LibRequest.MintRequest",
          "name": "request",
          "type": "tuple"
        },
        {
          "internalType": "address[]",
          "name": "keepers",
          "type": "address[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "r",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "s",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256",
          "name": "packedV",
          "type": "uint256"
        }
      ],
      "name": "verifyMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x85361e29b6114e45dfda206546b53085a64f3f39c80cde2716a1005f94062ca1",
  "receipt": {
    "to": null,
    "from": "0xf09B8dda559292111Af945e91717dA39eEF34Ade",
    "contractAddress": "0xC064B2b99F758B67368529FE95f16DfBEDa713Df",
    "transactionIndex": 0,
    "gasUsed": "1907215",
    "logsBloom": "0x
    "blockHash": "0xfa83374481d2e394440597b829a41acbd276a5c31f796faeeb601d1b6eeac6c4",
    "transactionHash": "0x85361e29b6114e45dfda206546b53085a64f3f39c80cde2716a1005f94062ca1",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 24692194,
        "transactionHash": "0x85361e29b6114e45dfda206546b53085a64f3f39c80cde2716a1005f94062ca1",
        "address": "0xC064B2b99F758B67368529FE95f16DfBEDa713Df",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f09b8dda559292111af945e91717da39eef34ade"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xfa83374481d2e394440597b829a41acbd276a5c31f796faeeb601d1b6eeac6c4"
      }
    ],
    "blockNumber": 24692194,
    "cumulativeGasUsed": "1907215",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "bacc995f75dbe5332b0cad8b3c08e62c",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"Cooldown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"btcAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxSatoshi\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"keepers\",\"type\":\"address[]\"}],\"name\":\"GroupAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"btcAddress\",\"type\":\"string\"}],\"name\":\"GroupDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"btcAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"receiptId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountInSatoshi\",\"type\":\"uint256\"}],\"name\":\"MintRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"receiptId\",\"type\":\"bytes32\"}],\"name\":\"MintVerified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EIP712_DOMAIN_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"KEEPER_COOLDOWN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"btcAddress\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSatoshi\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"keepers\",\"type\":\"address[]\"}],\"name\":\"addGroup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chillTime\",\"type\":\"uint256\"}],\"name\":\"chill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"btcAddress\",\"type\":\"string\"}],\"name\":\"deleteGroup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eBTC\",\"outputs\":[{\"internalType\":\"contract IEBTC\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"}],\"name\":\"getCooldownTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"btcAddress\",\"type\":\"string\"}],\"name\":\"getGroup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"btcAddress\",\"type\":\"string\"}],\"name\":\"getGroupAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"receiptId\",\"type\":\"bytes32\"}],\"name\":\"getReceipt\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountInSatoshi\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"txId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"},{\"internalType\":\"enum IDeCusSystem.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"btcAddress\",\"type\":\"string\"}],\"internalType\":\"struct IDeCusSystem.Receipt\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"btcAddress\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"identifier\",\"type\":\"uint256\"}],\"name\":\"getReceiptId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_eBTC\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeperRegistry\",\"outputs\":[{\"internalType\":\"contract IKeeperRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"btcAddress\",\"type\":\"string\"}],\"name\":\"listGroupKeeper\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minKeeperSatoshi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"message\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"packedV\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"recoverSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"btcAddress\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amountInSatoshi\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"identifier\",\"type\":\"uint256\"}],\"name\":\"requestMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"verified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"receiptId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"txId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"}],\"internalType\":\"struct LibRequest.MintRequest\",\"name\":\"request\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"keepers\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"r\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"s\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"packedV\",\"type\":\"uint256\"}],\"name\":\"verifyMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DeCusSystem.sol\":\"DeCusSystem\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x1562cd9922fbf739edfb979f506809e2743789cbde3177515542161c3d04b164\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x212fb1b1d4beaf74354dad9bc329f44ee3c5375ef1c32acff76b4ecefc10f1d8\",\"license\":\"MIT\"},\"contracts/DeCusSystem.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\n\\nimport {IDeCusSystem} from \\\"./interfaces/IDeCusSystem.sol\\\";\\nimport {IKeeperRegistry} from \\\"./interfaces/IKeeperRegistry.sol\\\";\\nimport {IEBTC} from \\\"./interfaces/IEBTC.sol\\\";\\nimport {SignatureValidator, LibRequest} from \\\"./utils/SignatureValidator.sol\\\";\\nimport {BtcUtility} from \\\"./utils/BtcUtility.sol\\\";\\n\\ncontract DeCusSystem is Ownable, Pausable, IDeCusSystem, SignatureValidator {\\n    using SafeMath for uint256;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    uint256 public constant KEEPER_COOLDOWN = 10 minutes;\\n    uint256 public minKeeperSatoshi = 1e5;\\n\\n    IEBTC public eBTC;\\n    IKeeperRegistry public keeperRegistry;\\n\\n    mapping(string => Group) private groups; // btc address -> Group\\n    mapping(bytes32 => Receipt) private receipts; // receipt ID -> Receipt\\n    mapping(address => uint256) private cooldownUntil; // keeper address -> cooldown end timestamp\\n\\n    function initialize(address _eBTC, address _registry) external {\\n        eBTC = IEBTC(_eBTC);\\n        keeperRegistry = IKeeperRegistry(_registry);\\n    }\\n\\n    function getGroup(string calldata btcAddress)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        Group storage group = groups[btcAddress];\\n        return (group.required, group.maxSatoshi, group.currSatoshi);\\n    }\\n\\n    function listGroupKeeper(string calldata btcAddress) public view returns (address[] memory) {\\n        Group storage group = groups[btcAddress];\\n\\n        address[] memory keeperArray = new address[](group.keeperSet.length());\\n        for (uint256 i = 0; i < group.keeperSet.length(); i++) {\\n            keeperArray[i] = group.keeperSet.at(i);\\n        }\\n        return keeperArray;\\n    }\\n\\n    function getReceipt(bytes32 receiptId) external view returns (Receipt memory) {\\n        return receipts[receiptId];\\n    }\\n\\n    function getCooldownTime(address keeper) external view returns (uint256) {\\n        return cooldownUntil[keeper];\\n    }\\n\\n    function getReceiptId(\\n        string memory btcAddress,\\n        address recipient,\\n        uint256 identifier\\n    ) public pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(btcAddress, recipient, identifier));\\n    }\\n\\n    function getGroupAllowance(string memory btcAddress) public view returns (uint256) {\\n        Group storage group = groups[btcAddress];\\n        return group.maxSatoshi.sub(group.currSatoshi);\\n    }\\n\\n    function addGroup(\\n        string memory btcAddress,\\n        uint256 required,\\n        uint256 maxSatoshi,\\n        address[] calldata keepers\\n    ) external onlyOwner {\\n        Group storage group = groups[btcAddress];\\n        require(group.maxSatoshi == 0, \\\"group id already exist\\\");\\n\\n        group.required = required;\\n        group.maxSatoshi = maxSatoshi;\\n        for (uint256 i = 0; i < keepers.length; i++) {\\n            require(\\n                keeperRegistry.getCollateralValue(keepers[i]) >= minKeeperSatoshi,\\n                \\\"keepre has not enough collaterl\\\"\\n            );\\n            group.keeperSet.add(keepers[i]);\\n        }\\n\\n        emit GroupAdded(btcAddress, required, maxSatoshi, keepers);\\n    }\\n\\n    function deleteGroup(string memory btcAddress) external onlyOwner {\\n        require(groups[btcAddress].currSatoshi == 0, \\\"group balance is not empty\\\");\\n\\n        delete groups[btcAddress];\\n\\n        emit GroupDeleted(btcAddress);\\n    }\\n\\n    function requestMint(\\n        string memory btcAddress,\\n        uint256 amountInSatoshi,\\n        uint256 identifier\\n    ) public {\\n        require(amountInSatoshi > 0, \\\"amount 0 is not allowed\\\");\\n        require(getGroupAllowance(btcAddress) >= amountInSatoshi, \\\"exceed group allowance\\\");\\n\\n        bytes32 receiptId = _requestDeposit(msg.sender, btcAddress, amountInSatoshi, identifier);\\n\\n        emit MintRequested(btcAddress, receiptId, msg.sender, amountInSatoshi);\\n    }\\n\\n    function verifyMint(\\n        LibRequest.MintRequest memory request,\\n        address[] calldata keepers, // keepers must be in ascending orders\\n        bytes32[] calldata r,\\n        bytes32[] calldata s,\\n        uint256 packedV\\n    ) public {\\n        Receipt storage receipt = receipts[request.receiptId];\\n        Group storage group = groups[receipt.btcAddress];\\n        require(receipt.status == Status.DepositRequested, \\\"receipt already verified\\\");\\n        require(keepers.length >= group.required, \\\"not enough keepers\\\");\\n\\n        _verifyDeposit(request, group.keeperSet, keepers, r, s, packedV);\\n        _approveDeposit(group, receipt, request.txId, request.height);\\n        _mintToUser(receipt);\\n\\n        emit MintVerified(request.receiptId);\\n    }\\n\\n    //---------------------------- Arbitration ---------------------------------\\n    function chill(address keeper, uint256 chillTime) external onlyOwner {\\n        _cooldown(keeper, block.timestamp.add(chillTime));\\n    }\\n\\n    //------------------------------ Private -----------------------------------\\n    function _requestDeposit(\\n        address recipient,\\n        string memory btcAddress,\\n        uint256 amountInSatoshi,\\n        uint256 identifier\\n    ) private returns (bytes32) {\\n        bytes32 receiptId = getReceiptId(btcAddress, recipient, identifier);\\n        Receipt storage receipt = receipts[receiptId];\\n        require(receipt.status < Status.DepositReceived, \\\"receipt is in use\\\");\\n\\n        receipt.recipient = recipient;\\n        receipt.btcAddress = btcAddress;\\n        receipt.amountInSatoshi = amountInSatoshi;\\n        receipt.status = Status.DepositRequested;\\n        receipt.createTimestamp = block.timestamp;\\n\\n        return receiptId;\\n    }\\n\\n    function _verifyDeposit(\\n        LibRequest.MintRequest memory request,\\n        EnumerableSet.AddressSet storage keeperSet,\\n        address[] calldata keepers,\\n        bytes32[] calldata r,\\n        bytes32[] calldata s,\\n        uint256 packedV\\n    ) private {\\n        uint256 cooldownTime = block.timestamp.add(KEEPER_COOLDOWN);\\n        for (uint256 i = 0; i < keepers.length; i++) {\\n            address keeper = keepers[i];\\n            require(cooldownUntil[keeper] <= block.timestamp, \\\"keeper is in cooldown\\\");\\n            require(keeperSet.contains(keeper), \\\"keeper is not in group\\\");\\n\\n            _cooldown(keeper, cooldownTime);\\n        }\\n\\n        _batchValidate(request, keepers, r, s, packedV);\\n    }\\n\\n    function _approveDeposit(\\n        Group storage group,\\n        Receipt storage receipt,\\n        bytes32 txId,\\n        uint256 height\\n    ) private {\\n        receipt.status = Status.DepositReceived;\\n        receipt.txId = txId;\\n        receipt.height = height;\\n\\n        uint256 currSatoshi = group.currSatoshi.add(receipt.amountInSatoshi);\\n        require(currSatoshi <= group.maxSatoshi, \\\"amount exceed max allowance\\\");\\n        group.currSatoshi = currSatoshi;\\n    }\\n\\n    function _mintToUser(Receipt storage receipt) private {\\n        // TODO: add fee deduction\\n        eBTC.mint(\\n            receipt.recipient,\\n            receipt.amountInSatoshi.mul(BtcUtility.getSatoshiMultiplierForEBTC())\\n        );\\n    }\\n\\n    function _cooldown(address keeper, uint256 cooldownEnd) private {\\n        cooldownUntil[keeper] = cooldownEnd;\\n        emit Cooldown(keeper, cooldownEnd);\\n    }\\n}\\n\",\"keccak256\":\"0x4d6bc9a7a69069935353b76a09ca8137ec3f2b04dde30b1b35eb1310dc1f5484\",\"license\":\"MIT\"},\"contracts/interfaces/IDeCusSystem.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\n\\ninterface IDeCusSystem {\\n    struct Group {\\n        uint256 required;\\n        uint256 maxSatoshi;\\n        uint256 currSatoshi;\\n        EnumerableSet.AddressSet keeperSet;\\n    }\\n\\n    enum Status {\\n        Available,\\n        DepositRequested,\\n        DepositReceived,\\n        WithdrawRequested,\\n        WithdrawDone // should equal to Available\\n    }\\n\\n    struct Receipt {\\n        address recipient;\\n        uint256 amountInSatoshi;\\n        uint256 createTimestamp;\\n        bytes32 txId;\\n        uint256 height;\\n        Status status;\\n        string btcAddress; // for withdraw\\n    }\\n\\n    // events\\n    event GroupAdded(string btcAddress, uint256 required, uint256 maxSatoshi, address[] keepers);\\n    event GroupDeleted(string btcAddress);\\n\\n    event MintRequested(\\n        string btcAddress,\\n        bytes32 receiptId,\\n        address sender,\\n        uint256 amountInSatoshi\\n    );\\n    event MintVerified(bytes32 indexed receiptId);\\n\\n    event Cooldown(address indexed keeper, uint256 endTime);\\n}\\n\",\"keccak256\":\"0x56d55a004cde4d8ca50fb392ed0ed2b6bb5b58c12cb5268d66aedf2aa0d7f54c\",\"license\":\"MIT\"},\"contracts/interfaces/IEBTC.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IEBTC is IERC20 {\\n    function mint(address to, uint256 amount) external;\\n\\n    function burn(uint256 amount) external;\\n\\n    function burnFrom(address account, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xec5cedd6709fa64c88f3cb272bb38ae3623c617d10cfdf8fccac4241df779867\",\"license\":\"MIT\"},\"contracts/interfaces/IKeeperRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface IKeeperRegistry {\\n    function getCollateralValue(address keeper) external view returns (uint256);\\n\\n    /*function importKeepers(\\n        address[] calldata assets,\\n        address[] calldata keepers,\\n        uint256[][] calldata keeperAmounts\\n    ) external;*/\\n\\n    event AssetAdded(address indexed asset);\\n\\n    event KeeperAdded(address indexed keeper, address asset, uint256 amount);\\n    event KeeperDeleted(address indexed keeper);\\n    event KeeperImported(\\n        address indexed from,\\n        address[] assets,\\n        address[] keepers,\\n        uint256[][] keeperAmounts\\n    );\\n\\n    event TreasuryTransferred(address indexed previousTreasury, address indexed newTreasury);\\n    event Confiscated(address indexed treasury, address asset, uint256 amount);\\n}\\n\",\"keccak256\":\"0x01189b7dadcd84967e8711c9b498a9dbef8280887d779e5a0cfa3bf6c468c50e\",\"license\":\"MIT\"},\"contracts/utils/BtcUtility.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\nlibrary BtcUtility {\\n    uint256 public constant ERC20_DECIMAL = 18;\\n\\n    //    function getBTCDecimal() external pure returns (uint256) { return BTC_DECIMAL; }\\n\\n    function getSatoshiMultiplierForEBTC() internal pure returns (uint256) {\\n        return 1e10;\\n    }\\n\\n    function getSatoshiDivisor(uint256 decimal) internal pure returns (uint256) {\\n        require(ERC20_DECIMAL >= decimal, \\\"asset decimal not supported\\\");\\n\\n        uint256 res = 10**uint256(ERC20_DECIMAL - decimal);\\n        require(res > 0, \\\"Power overflow\\\");\\n\\n        return res;\\n    }\\n}\\n\",\"keccak256\":\"0x076e7e44801f3516036c200728bd05e28b3956d00dcc6ed5f21fa947122aaf30\",\"license\":\"MIT\"},\"contracts/utils/LibEIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ncontract LibEIP712 {\\n    uint256 public chainId;\\n    address verifyingContract = address(this);\\n\\n    // EIP191 header for EIP712 prefix\\n    //string constant internal EIP191_HEADER = \\\"\\\\x19\\\\x01\\\";\\n\\n    // EIP712 Domain Name value\\n    string internal constant EIP712_DOMAIN_NAME = \\\"DeCus\\\";\\n\\n    // EIP712 Domain Version value\\n    string internal constant EIP712_DOMAIN_VERSION = \\\"1.0\\\";\\n\\n    // Hash of the EIP712 Domain Separator Schema\\n    bytes32 internal constant EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH =\\n        keccak256(\\n            abi.encodePacked(\\n                \\\"EIP712Domain(\\\",\\n                \\\"string name,\\\",\\n                \\\"string version,\\\",\\n                \\\"uint256 chainId,\\\",\\n                \\\"address verifyingContract\\\",\\n                \\\")\\\"\\n            )\\n        );\\n\\n    // Hash of the EIP712 Domain Separator data\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 public EIP712_DOMAIN_HASH;\\n\\n    constructor() public {\\n        uint256 id;\\n        assembly {\\n            id := chainid()\\n        }\\n        chainId = id;\\n\\n        EIP712_DOMAIN_HASH = keccak256(\\n            abi.encode(\\n                EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH,\\n                keccak256(bytes(EIP712_DOMAIN_NAME)),\\n                keccak256(bytes(EIP712_DOMAIN_VERSION)),\\n                chainId,\\n                verifyingContract\\n            )\\n        );\\n    }\\n\\n    function hashEIP712Message(bytes32 hashStruct) internal view returns (bytes32 result) {\\n        bytes32 eip712DomainHash = EIP712_DOMAIN_HASH;\\n\\n        // Assembly for more efficient computing:\\n        // keccak256(abi.encodePacked(\\n        //     EIP191_HEADER,\\n        //     EIP712_DOMAIN_HASH,\\n        //     hashStruct\\n        // ));\\n\\n        assembly {\\n            // Load free memory pointer\\n            let memPtr := mload(64)\\n\\n            mstore(memPtr, 0x1901000000000000000000000000000000000000000000000000000000000000) // EIP191 header\\n            mstore(add(memPtr, 2), eip712DomainHash) // EIP712 domain hash\\n            mstore(add(memPtr, 34), hashStruct) // Hash of struct\\n\\n            // Compute hash\\n            result := keccak256(memPtr, 66)\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x2e46123bda7c0e4bfe7028f20210630cdfd94429e24d4f483875a47113436249\",\"license\":\"MIT\"},\"contracts/utils/LibRequest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport \\\"./LibEIP712.sol\\\";\\n\\ncontract LibRequest is LibEIP712 {\\n    string private constant REQUEST_TYPE =\\n        \\\"MintRequest(bytes32 receiptId,bytes32 txId,uint256 height)\\\";\\n    bytes32 private constant REQUEST_TYPEHASH = keccak256(abi.encodePacked(REQUEST_TYPE));\\n\\n    // solhint-disable max-line-length\\n    struct MintRequest {\\n        bytes32 receiptId;\\n        bytes32 txId;\\n        uint256 height;\\n    }\\n\\n    function getMintRequestHash(MintRequest memory request)\\n        internal\\n        view\\n        returns (bytes32 requestHash)\\n    {\\n        return hashEIP712Message(hashMintRequest(request));\\n    }\\n\\n    function hashMintRequest(MintRequest memory request) private pure returns (bytes32 result) {\\n        return\\n            keccak256(\\n                abi.encode(REQUEST_TYPEHASH, request.receiptId, request.txId, request.height)\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x8a68c1c39aa22fb557a096977980d986f09f9d60bac63fca03568e7ab110a31c\",\"license\":\"MIT\"},\"contracts/utils/SignatureValidator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./LibRequest.sol\\\";\\n\\ncontract SignatureValidator is LibRequest {\\n    mapping(uint256 => bool) public verified;\\n\\n    function recoverSigner(\\n        bytes32 message,\\n        uint8 packedV,\\n        bytes32 r,\\n        bytes32 s\\n    ) public pure returns (address) {\\n        return ecrecover(message, packedV, r, s);\\n    }\\n\\n    function _batchValidate(\\n        LibRequest.MintRequest memory request,\\n        address[] calldata keepers,\\n        bytes32[] calldata r,\\n        bytes32[] calldata s,\\n        uint256 packedV\\n    ) internal view returns (bool) {\\n        for (uint256 i = 0; i < keepers.length; i++) {\\n            require(\\n                recoverSigner(\\n                    getMintRequestHash(request),\\n                    uint8(packedV), // the lowest byte of packedV\\n                    r[i],\\n                    s[i]\\n                ) == keepers[i],\\n                \\\"invalid signature\\\"\\n            );\\n\\n            packedV >>= 8;\\n        }\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x10296f6a3a9a760607f3cbe15de13e58286be2732b7e0e55699f7fdcf336faf5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600280546001600160a01b03191630179055620186a06005553480156200002a57600080fd5b5060006200003762000174565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506000805460ff60a01b19169055466001819055604051620000a59060200162000178565b60408051601f19818403018152828252805160209182012083830183526005845264446543757360d81b938201939093528151808301835260038152620312e360ec1b9082015260015460025492516200015294937fb1dca8a8bd71a82819d7e85f2c0b213421335de1045a7350e1d15b671e65155e937fe6bbd6277e1bf288eed5e8d1780f9a50b239e86b153736bceebccf4ea79d90b393926001600160a01b03909216910162000207565b60408051601f1981840301815291905280516020909101206003555062000233565b3390565b6c08a92a06e626488dedac2d2dc5609b1b81526b1cdd1c9a5b99c81b985b594b60a21b600d8201526e1cdd1c9a5b99c81d995c9cda5bdb8b608a1b60198201526f1d5a5b9d0c8d4d8818da185a5b92590b60821b60288201527f6164647265737320766572696679696e67436f6e7472616374000000000000006038820152602960f81b605182015260520190565b9485526020850193909352604084019190915260608301526001600160a01b0316608082015260a00190565b611f7080620002436000396000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c80639522dd70116100c3578063c976966a1161007c578063c976966a146102a9578063d1176107146102bc578063d45167d0146102cf578063e306f779146102e2578063f2fde38b146102ea578063fcecbb61146102fd57610158565b80639522dd70146102315780639a8a059214610251578063abef281e14610259578063ad95033a1461027b578063c5a746bf14610283578063c764654c1461029657610158565b8063715018a611610115578063715018a6146101eb5780637f7bcb62146101f357806383e22774146101fb57806385c95a1e146102035780638da5cb5b146102165780639123cdfc1461021e57610158565b806309e16c431461015d5780631a9425c1146101865780632e8b92a9146101a6578063485cc955146101bb5780635c975abb146101ce5780635f447e04146101d6575b600080fd5b61017061016b3660046115c5565b61031d565b60405161017d919061196b565b60405180910390f35b6101996101943660046114c4565b610353565b60405161017d9190611960565b6101b96101b436600461158a565b610368565b005b6101b96101c9366004611466565b610474565b6101996104a2565b6101de6104b2565b60405161017d91906118e6565b6101b96104c1565b61017061054a565b6101de610550565b61017061021136600461144b565b61055f565b6101de61057a565b6101b961022c366004611628565b610589565b61024461023f36600461151d565b610624565b60405161017d9190611913565b6101706106f5565b61026c61026736600461151d565b6106fb565b60405161017d93929190611e93565b61017061073d565b6101b9610291366004611674565b610743565b6101b96102a43660046116ef565b61091b565b6101b96102b736600461149a565b610a0e565b6101706102ca36600461158a565b610a64565b6101de6102dd3660046114dc565b610aa9565b610170610b04565b6101b96102f836600461144b565b610b0a565b61031061030b3660046114c4565b610bca565b60405161017d9190611e27565b600083838360405160200161033493929190611837565b6040516020818303038152906040528051906020012090509392505050565b60046020526000908152604090205460ff1681565b610370610ceb565b6001600160a01b031661038161057a565b6001600160a01b0316146103b05760405162461bcd60e51b81526004016103a790611d2c565b60405180910390fd5b6008816040516103c0919061181b565b9081526020016040518091039020600201546000146103f15760405162461bcd60e51b81526004016103a790611c89565b600881604051610401919061181b565b90815260405190819003602001902060008082556001820181905560028201819055600382018181816104348282611291565b5050505050507feacdb5801d8160882398b78a544379ff28cbe8bd4de76aca39013c89311e00d58160405161046991906119ad565b60405180910390a150565b600680546001600160a01b039384166001600160a01b03199182161790915560078054929093169116179055565b600054600160a01b900460ff1690565b6006546001600160a01b031681565b6104c9610ceb565b6001600160a01b03166104da61057a565b6001600160a01b0316146105005760405162461bcd60e51b81526004016103a790611d2c565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b61025881565b6007546001600160a01b031681565b6001600160a01b03166000908152600a602052604090205490565b6000546001600160a01b031690565b600082116105a95760405162461bcd60e51b81526004016103a790611df0565b816105b384610a64565b10156105d15760405162461bcd60e51b81526004016103a790611dc0565b60006105df33858585610cef565b90507fb4a6e689c14ed82864bcff18a4f88852c4702039b9ecaa30fa19b78c62a640748482338660405161061694939291906119c0565b60405180910390a150505050565b606060006008848460405161063a92919061180b565b90815260200160405180910390209050606061065882600301610d99565b67ffffffffffffffff8111801561066e57600080fd5b50604051908082528060200260200182016040528015610698578160200160208202803683370190505b50905060005b6106aa83600301610d99565b8110156106ea576106be6003840182610da4565b8282815181106106ca57fe5b6001600160a01b039092166020928302919091019091015260010161069e565b509150505b92915050565b60015481565b6000806000806008868660405161071392919061180b565b90815260405190819003602001902080546001820154600290920154909891975095509350505050565b60055481565b61074b610ceb565b6001600160a01b031661075c61057a565b6001600160a01b0316146107825760405162461bcd60e51b81526004016103a790611d2c565b6000600886604051610794919061181b565b9081526020016040518091039020905080600101546000146107c85760405162461bcd60e51b81526004016103a790611bbf565b8481556001810184905560005b828110156108d3576005546007546001600160a01b03166397904e428686858181106107fd57fe5b9050602002016020810190610812919061144b565b6040518263ffffffff1660e01b815260040161082e91906118e6565b60206040518083038186803b15801561084657600080fd5b505afa15801561085a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087e91906117c7565b101561089c5760405162461bcd60e51b81526004016103a790611b88565b6108ca8484838181106108ab57fe5b90506020020160208101906108c0919061144b565b6003840190610db0565b506001016107d5565b507f318cdd783f12822d86ff4e2e147ae395b85e9e163d0f2f36eefe022364c06213868686868660405161090b9594939291906119f8565b60405180910390a1505050505050565b87516000908152600960205260408082209051909190600890610942906006850190611876565b90815260405190819003602001902090506001600583015460ff16600481111561096857fe5b146109855760405162461bcd60e51b81526004016103a790611c52565b80548810156109a65760405162461bcd60e51b81526004016103a790611c26565b6109ba8a826003018b8b8b8b8b8b8b610dc5565b6109ce81838c602001518d60400151610e95565b6109d782610eff565b89516040517f8d1d1df58b9c8d102f7ceeada29d0bfe7fe55ce5ba1a2ae27c51eb024c95749790600090a250505050505050505050565b610a16610ceb565b6001600160a01b0316610a2761057a565b6001600160a01b031614610a4d5760405162461bcd60e51b81526004016103a790611d2c565b610a6082610a5b4284610f7f565b610fa4565b5050565b600080600883604051610a77919061181b565b90815260200160405180910390209050610aa281600201548260010154610ffb90919063ffffffff16565b9392505050565b600060018585858560405160008152602001604052604051610ace949392919061198f565b6020604051602081039080840390855afa158015610af0573d6000803e3d6000fd5b5050604051601f1901519695505050505050565b60035481565b610b12610ceb565b6001600160a01b0316610b2361057a565b6001600160a01b031614610b495760405162461bcd60e51b81526004016103a790611d2c565b6001600160a01b038116610b6f5760405162461bcd60e51b81526004016103a790611ad4565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b610bd26112b2565b600082815260096020908152604091829020825160e08101845281546001600160a01b03168152600182015492810192909252600281015492820192909252600382015460608201526004808301546080830152600583015491929160a084019160ff90911690811115610c4257fe5b6004811115610c4d57fe5b815260068201805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152938201939291830182828015610cdb5780601f10610cb057610100808354040283529160200191610cdb565b820191906000526020600020905b815481529060010190602001808311610cbe57829003601f168201915b5050505050815250509050919050565b3390565b600080610cfd85878561031d565b60008181526009602052604090209091506002600582015460ff166004811115610d2357fe5b10610d405760405162461bcd60e51b81526004016103a790611cc0565b80546001600160a01b0319166001600160a01b0388161781558551610d6e90600683019060208901906112ef565b50600180820186905560058201805460ff191682800217905550426002909101559050949350505050565b60006106ef82611023565b6000610aa28383611027565b6000610aa2836001600160a01b03841661106c565b6000610dd342610258610f7f565b905060005b87811015610e77576000898983818110610dee57fe5b9050602002016020810190610e03919061144b565b6001600160a01b0381166000908152600a6020526040902054909150421015610e3e5760405162461bcd60e51b81526004016103a790611d61565b610e488b826110b6565b610e645760405162461bcd60e51b81526004016103a790611d90565b610e6e8184610fa4565b50600101610dd8565b50610e888a898989898989896110cb565b5050505050505050505050565b60058301805460ff191660029081179091556003840183905560048401829055600184015490850154600091610ecb9190610f7f565b90508460010154811115610ef15760405162461bcd60e51b81526004016103a790611b1a565b600290940193909355505050565b60065481546001600160a01b03918216916340c10f199116610f2d610f2261117e565b600186015490611187565b6040518363ffffffff1660e01b8152600401610f4a9291906118fa565b600060405180830381600087803b158015610f6457600080fd5b505af1158015610f78573d6000803e3d6000fd5b5050505050565b600082820183811015610aa25760405162461bcd60e51b81526004016103a790611b51565b6001600160a01b0382166000818152600a602052604090819020839055517f8a05f911d8ab7fc50fec37ef4ba7f9bfcb1a3c191c81dcd824ad0946c4e20d6590610fef90849061196b565b60405180910390a25050565b60008282111561101d5760405162461bcd60e51b81526004016103a790611bef565b50900390565b5490565b8154600090821061104a5760405162461bcd60e51b81526004016103a790611a67565b82600001828154811061105957fe5b9060005260206000200154905092915050565b600061107883836111c1565b6110ae575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556106ef565b5060006106ef565b6000610aa2836001600160a01b0384166111c1565b6000805b8781101561116e578888828181106110e357fe5b90506020020160208101906110f8919061144b565b6001600160a01b031661113961110d8c6111d9565b858a8a8681811061111a57fe5b9050602002013589898781811061112d57fe5b90506020020135610aa9565b6001600160a01b03161461115f5760405162461bcd60e51b81526004016103a790611aa9565b60089290921c916001016110cf565b5060019998505050505050505050565b6402540be40090565b600082611196575060006106ef565b828202828482816111a357fe5b0414610aa25760405162461bcd60e51b81526004016103a790611ceb565b60009081526001919091016020526040902054151590565b60006106ef6111e7836111ec565b61126c565b60006040518060600160405280603a8152602001611f01603a9139604051602001611217919061181b565b6040516020818303038152906040528051906020012082600001518360200151846040015160405160200161124f9493929190611974565b604051602081830303815290604052805190602001209050919050565b60035460405161190160f01b8152600281019190915260228101919091526042902090565b50805460008255906000526020600020908101906112af919061136d565b50565b6040805160e08101825260008082526020820181905291810182905260608101829052608081018290529060a08201908152602001606081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061133057805160ff191683800117855561135d565b8280016001018555821561135d579182015b8281111561135d578251825591602001919060010190611342565b5061136992915061136d565b5090565b5b80821115611369576000815560010161136e565b80356001600160a01b03811681146106ef57600080fd5b60008083601f8401126113aa578182fd5b50813567ffffffffffffffff8111156113c1578182fd5b60208301915083602080830285010111156113db57600080fd5b9250929050565b600082601f8301126113f2578081fd5b813567ffffffffffffffff811115611408578182fd5b61141b601f8201601f1916602001611ea9565b915080825283602082850101111561143257600080fd5b8060208401602084013760009082016020015292915050565b60006020828403121561145c578081fd5b610aa28383611382565b60008060408385031215611478578081fd5b6114828484611382565b91506114918460208501611382565b90509250929050565b600080604083850312156114ac578182fd5b6114b68484611382565b946020939093013593505050565b6000602082840312156114d5578081fd5b5035919050565b600080600080608085870312156114f1578182fd5b84359350602085013560ff81168114611508578283fd5b93969395505050506040820135916060013590565b6000806020838503121561152f578182fd5b823567ffffffffffffffff80821115611546578384fd5b818501915085601f830112611559578384fd5b813581811115611567578485fd5b866020828501011115611578578485fd5b60209290920196919550909350505050565b60006020828403121561159b578081fd5b813567ffffffffffffffff8111156115b1578182fd5b6115bd848285016113e2565b949350505050565b6000806000606084860312156115d9578283fd5b833567ffffffffffffffff8111156115ef578384fd5b6115fb868287016113e2565b93505060208401356001600160a01b0381168114611617578283fd5b929592945050506040919091013590565b60008060006060848603121561163c578283fd5b833567ffffffffffffffff811115611652578384fd5b61165e868287016113e2565b9660208601359650604090950135949350505050565b60008060008060006080868803121561168b578081fd5b853567ffffffffffffffff808211156116a2578283fd5b6116ae89838a016113e2565b9650602088013595506040880135945060608801359150808211156116d1578283fd5b506116de88828901611399565b969995985093965092949392505050565b600080600080600080600080888a0360e081121561170b578384fd5b6060811215611718578384fd5b506117236060611ea9565b8935815260208a0135602082015260408a0135604082015280985050606089013567ffffffffffffffff80821115611759578485fd5b6117658c838d01611399565b909950975060808b013591508082111561177d578485fd5b6117898c838d01611399565b909750955060a08b01359150808211156117a1578485fd5b506117ae8b828c01611399565b999c989b50969995989497949560c00135949350505050565b6000602082840312156117d8578081fd5b5051919050565b600081518084526117f7816020860160208601611ed0565b601f01601f19169290920160200192915050565b6000828483379101908152919050565b6000825161182d818460208701611ed0565b9190910192915050565b60008451611849818460208901611ed0565b60609490941b6bffffffffffffffffffffffff191691909301908152601481019190915260340192915050565b600080835460018082166000811461189557600181146118ac576118db565b60ff198316865260028304607f16860193506118db565b600283048786526020808720875b838110156118d35781548a8201529085019082016118ba565b505050860193505b509195945050505050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b818110156119545783516001600160a01b03168352928401929184019160010161192f565b50909695505050505050565b901515815260200190565b90815260200190565b93845260208401929092526040830152606082015260800190565b93845260ff9290921660208401526040830152606082015260800190565b600060208252610aa260208301846117df565b6000608082526119d360808301876117df565b6020830195909552506001600160a01b03929092166040830152606090910152919050565b600060808252611a0b60808301886117df565b602083810188905260408401879052838203606085015284825285918101835b86811015611a59578383016001600160a01b03611a488287611382565b168352935090820190600101611a2b565b509998505050505050505050565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604082015261647360f01b606082015260800190565b602080825260119082015270696e76616c6964207369676e617475726560781b604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601b908201527f616d6f756e7420657863656564206d617820616c6c6f77616e63650000000000604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252601f908201527f6b656570726520686173206e6f7420656e6f75676820636f6c6c617465726c00604082015260600190565b60208082526016908201527519dc9bdd5c081a5908185b1c9958591e48195e1a5cdd60521b604082015260600190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b6020808252601290820152716e6f7420656e6f756768206b65657065727360701b604082015260600190565b60208082526018908201527f7265636569707420616c72656164792076657269666965640000000000000000604082015260600190565b6020808252601a908201527f67726f75702062616c616e6365206973206e6f7420656d707479000000000000604082015260600190565b6020808252601190820152707265636569707420697320696e2075736560781b604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526015908201527435b2b2b832b91034b99034b71031b7b7b63237bbb760591b604082015260600190565b60208082526016908201527506b6565706572206973206e6f7420696e2067726f75760541b604082015260600190565b6020808252601690820152756578636565642067726f757020616c6c6f77616e636560501b604082015260600190565b60208082526017908201527f616d6f756e742030206973206e6f7420616c6c6f776564000000000000000000604082015260600190565b60006020825260018060a01b038351166020830152602083015160408301526040830151606083015260608301516080830152608083015160a083015260a083015160058110611e7357fe5b8060c08401525060c083015160e0808401526115bd6101008401826117df565b9283526020830191909152604082015260600190565b60405181810167ffffffffffffffff81118282101715611ec857600080fd5b604052919050565b60005b83811015611eeb578181015183820152602001611ed3565b83811115611efa576000848401525b5050505056fe4d696e74526571756573742862797465733332207265636569707449642c6279746573333220747849642c75696e743235362068656967687429a26469706673582212200421b79f464fb44c3502b2f921ffe1aae9d2c5e90d75478f4ea95e161477153d64736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101585760003560e01c80639522dd70116100c3578063c976966a1161007c578063c976966a146102a9578063d1176107146102bc578063d45167d0146102cf578063e306f779146102e2578063f2fde38b146102ea578063fcecbb61146102fd57610158565b80639522dd70146102315780639a8a059214610251578063abef281e14610259578063ad95033a1461027b578063c5a746bf14610283578063c764654c1461029657610158565b8063715018a611610115578063715018a6146101eb5780637f7bcb62146101f357806383e22774146101fb57806385c95a1e146102035780638da5cb5b146102165780639123cdfc1461021e57610158565b806309e16c431461015d5780631a9425c1146101865780632e8b92a9146101a6578063485cc955146101bb5780635c975abb146101ce5780635f447e04146101d6575b600080fd5b61017061016b3660046115c5565b61031d565b60405161017d919061196b565b60405180910390f35b6101996101943660046114c4565b610353565b60405161017d9190611960565b6101b96101b436600461158a565b610368565b005b6101b96101c9366004611466565b610474565b6101996104a2565b6101de6104b2565b60405161017d91906118e6565b6101b96104c1565b61017061054a565b6101de610550565b61017061021136600461144b565b61055f565b6101de61057a565b6101b961022c366004611628565b610589565b61024461023f36600461151d565b610624565b60405161017d9190611913565b6101706106f5565b61026c61026736600461151d565b6106fb565b60405161017d93929190611e93565b61017061073d565b6101b9610291366004611674565b610743565b6101b96102a43660046116ef565b61091b565b6101b96102b736600461149a565b610a0e565b6101706102ca36600461158a565b610a64565b6101de6102dd3660046114dc565b610aa9565b610170610b04565b6101b96102f836600461144b565b610b0a565b61031061030b3660046114c4565b610bca565b60405161017d9190611e27565b600083838360405160200161033493929190611837565b6040516020818303038152906040528051906020012090509392505050565b60046020526000908152604090205460ff1681565b610370610ceb565b6001600160a01b031661038161057a565b6001600160a01b0316146103b05760405162461bcd60e51b81526004016103a790611d2c565b60405180910390fd5b6008816040516103c0919061181b565b9081526020016040518091039020600201546000146103f15760405162461bcd60e51b81526004016103a790611c89565b600881604051610401919061181b565b90815260405190819003602001902060008082556001820181905560028201819055600382018181816104348282611291565b5050505050507feacdb5801d8160882398b78a544379ff28cbe8bd4de76aca39013c89311e00d58160405161046991906119ad565b60405180910390a150565b600680546001600160a01b039384166001600160a01b03199182161790915560078054929093169116179055565b600054600160a01b900460ff1690565b6006546001600160a01b031681565b6104c9610ceb565b6001600160a01b03166104da61057a565b6001600160a01b0316146105005760405162461bcd60e51b81526004016103a790611d2c565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b61025881565b6007546001600160a01b031681565b6001600160a01b03166000908152600a602052604090205490565b6000546001600160a01b031690565b600082116105a95760405162461bcd60e51b81526004016103a790611df0565b816105b384610a64565b10156105d15760405162461bcd60e51b81526004016103a790611dc0565b60006105df33858585610cef565b90507fb4a6e689c14ed82864bcff18a4f88852c4702039b9ecaa30fa19b78c62a640748482338660405161061694939291906119c0565b60405180910390a150505050565b606060006008848460405161063a92919061180b565b90815260200160405180910390209050606061065882600301610d99565b67ffffffffffffffff8111801561066e57600080fd5b50604051908082528060200260200182016040528015610698578160200160208202803683370190505b50905060005b6106aa83600301610d99565b8110156106ea576106be6003840182610da4565b8282815181106106ca57fe5b6001600160a01b039092166020928302919091019091015260010161069e565b509150505b92915050565b60015481565b6000806000806008868660405161071392919061180b565b90815260405190819003602001902080546001820154600290920154909891975095509350505050565b60055481565b61074b610ceb565b6001600160a01b031661075c61057a565b6001600160a01b0316146107825760405162461bcd60e51b81526004016103a790611d2c565b6000600886604051610794919061181b565b9081526020016040518091039020905080600101546000146107c85760405162461bcd60e51b81526004016103a790611bbf565b8481556001810184905560005b828110156108d3576005546007546001600160a01b03166397904e428686858181106107fd57fe5b9050602002016020810190610812919061144b565b6040518263ffffffff1660e01b815260040161082e91906118e6565b60206040518083038186803b15801561084657600080fd5b505afa15801561085a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087e91906117c7565b101561089c5760405162461bcd60e51b81526004016103a790611b88565b6108ca8484838181106108ab57fe5b90506020020160208101906108c0919061144b565b6003840190610db0565b506001016107d5565b507f318cdd783f12822d86ff4e2e147ae395b85e9e163d0f2f36eefe022364c06213868686868660405161090b9594939291906119f8565b60405180910390a1505050505050565b87516000908152600960205260408082209051909190600890610942906006850190611876565b90815260405190819003602001902090506001600583015460ff16600481111561096857fe5b146109855760405162461bcd60e51b81526004016103a790611c52565b80548810156109a65760405162461bcd60e51b81526004016103a790611c26565b6109ba8a826003018b8b8b8b8b8b8b610dc5565b6109ce81838c602001518d60400151610e95565b6109d782610eff565b89516040517f8d1d1df58b9c8d102f7ceeada29d0bfe7fe55ce5ba1a2ae27c51eb024c95749790600090a250505050505050505050565b610a16610ceb565b6001600160a01b0316610a2761057a565b6001600160a01b031614610a4d5760405162461bcd60e51b81526004016103a790611d2c565b610a6082610a5b4284610f7f565b610fa4565b5050565b600080600883604051610a77919061181b565b90815260200160405180910390209050610aa281600201548260010154610ffb90919063ffffffff16565b9392505050565b600060018585858560405160008152602001604052604051610ace949392919061198f565b6020604051602081039080840390855afa158015610af0573d6000803e3d6000fd5b5050604051601f1901519695505050505050565b60035481565b610b12610ceb565b6001600160a01b0316610b2361057a565b6001600160a01b031614610b495760405162461bcd60e51b81526004016103a790611d2c565b6001600160a01b038116610b6f5760405162461bcd60e51b81526004016103a790611ad4565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b610bd26112b2565b600082815260096020908152604091829020825160e08101845281546001600160a01b03168152600182015492810192909252600281015492820192909252600382015460608201526004808301546080830152600583015491929160a084019160ff90911690811115610c4257fe5b6004811115610c4d57fe5b815260068201805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152938201939291830182828015610cdb5780601f10610cb057610100808354040283529160200191610cdb565b820191906000526020600020905b815481529060010190602001808311610cbe57829003601f168201915b5050505050815250509050919050565b3390565b600080610cfd85878561031d565b60008181526009602052604090209091506002600582015460ff166004811115610d2357fe5b10610d405760405162461bcd60e51b81526004016103a790611cc0565b80546001600160a01b0319166001600160a01b0388161781558551610d6e90600683019060208901906112ef565b50600180820186905560058201805460ff191682800217905550426002909101559050949350505050565b60006106ef82611023565b6000610aa28383611027565b6000610aa2836001600160a01b03841661106c565b6000610dd342610258610f7f565b905060005b87811015610e77576000898983818110610dee57fe5b9050602002016020810190610e03919061144b565b6001600160a01b0381166000908152600a6020526040902054909150421015610e3e5760405162461bcd60e51b81526004016103a790611d61565b610e488b826110b6565b610e645760405162461bcd60e51b81526004016103a790611d90565b610e6e8184610fa4565b50600101610dd8565b50610e888a898989898989896110cb565b5050505050505050505050565b60058301805460ff191660029081179091556003840183905560048401829055600184015490850154600091610ecb9190610f7f565b90508460010154811115610ef15760405162461bcd60e51b81526004016103a790611b1a565b600290940193909355505050565b60065481546001600160a01b03918216916340c10f199116610f2d610f2261117e565b600186015490611187565b6040518363ffffffff1660e01b8152600401610f4a9291906118fa565b600060405180830381600087803b158015610f6457600080fd5b505af1158015610f78573d6000803e3d6000fd5b5050505050565b600082820183811015610aa25760405162461bcd60e51b81526004016103a790611b51565b6001600160a01b0382166000818152600a602052604090819020839055517f8a05f911d8ab7fc50fec37ef4ba7f9bfcb1a3c191c81dcd824ad0946c4e20d6590610fef90849061196b565b60405180910390a25050565b60008282111561101d5760405162461bcd60e51b81526004016103a790611bef565b50900390565b5490565b8154600090821061104a5760405162461bcd60e51b81526004016103a790611a67565b82600001828154811061105957fe5b9060005260206000200154905092915050565b600061107883836111c1565b6110ae575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556106ef565b5060006106ef565b6000610aa2836001600160a01b0384166111c1565b6000805b8781101561116e578888828181106110e357fe5b90506020020160208101906110f8919061144b565b6001600160a01b031661113961110d8c6111d9565b858a8a8681811061111a57fe5b9050602002013589898781811061112d57fe5b90506020020135610aa9565b6001600160a01b03161461115f5760405162461bcd60e51b81526004016103a790611aa9565b60089290921c916001016110cf565b5060019998505050505050505050565b6402540be40090565b600082611196575060006106ef565b828202828482816111a357fe5b0414610aa25760405162461bcd60e51b81526004016103a790611ceb565b60009081526001919091016020526040902054151590565b60006106ef6111e7836111ec565b61126c565b60006040518060600160405280603a8152602001611f01603a9139604051602001611217919061181b565b6040516020818303038152906040528051906020012082600001518360200151846040015160405160200161124f9493929190611974565b604051602081830303815290604052805190602001209050919050565b60035460405161190160f01b8152600281019190915260228101919091526042902090565b50805460008255906000526020600020908101906112af919061136d565b50565b6040805160e08101825260008082526020820181905291810182905260608101829052608081018290529060a08201908152602001606081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061133057805160ff191683800117855561135d565b8280016001018555821561135d579182015b8281111561135d578251825591602001919060010190611342565b5061136992915061136d565b5090565b5b80821115611369576000815560010161136e565b80356001600160a01b03811681146106ef57600080fd5b60008083601f8401126113aa578182fd5b50813567ffffffffffffffff8111156113c1578182fd5b60208301915083602080830285010111156113db57600080fd5b9250929050565b600082601f8301126113f2578081fd5b813567ffffffffffffffff811115611408578182fd5b61141b601f8201601f1916602001611ea9565b915080825283602082850101111561143257600080fd5b8060208401602084013760009082016020015292915050565b60006020828403121561145c578081fd5b610aa28383611382565b60008060408385031215611478578081fd5b6114828484611382565b91506114918460208501611382565b90509250929050565b600080604083850312156114ac578182fd5b6114b68484611382565b946020939093013593505050565b6000602082840312156114d5578081fd5b5035919050565b600080600080608085870312156114f1578182fd5b84359350602085013560ff81168114611508578283fd5b93969395505050506040820135916060013590565b6000806020838503121561152f578182fd5b823567ffffffffffffffff80821115611546578384fd5b818501915085601f830112611559578384fd5b813581811115611567578485fd5b866020828501011115611578578485fd5b60209290920196919550909350505050565b60006020828403121561159b578081fd5b813567ffffffffffffffff8111156115b1578182fd5b6115bd848285016113e2565b949350505050565b6000806000606084860312156115d9578283fd5b833567ffffffffffffffff8111156115ef578384fd5b6115fb868287016113e2565b93505060208401356001600160a01b0381168114611617578283fd5b929592945050506040919091013590565b60008060006060848603121561163c578283fd5b833567ffffffffffffffff811115611652578384fd5b61165e868287016113e2565b9660208601359650604090950135949350505050565b60008060008060006080868803121561168b578081fd5b853567ffffffffffffffff808211156116a2578283fd5b6116ae89838a016113e2565b9650602088013595506040880135945060608801359150808211156116d1578283fd5b506116de88828901611399565b969995985093965092949392505050565b600080600080600080600080888a0360e081121561170b578384fd5b6060811215611718578384fd5b506117236060611ea9565b8935815260208a0135602082015260408a0135604082015280985050606089013567ffffffffffffffff80821115611759578485fd5b6117658c838d01611399565b909950975060808b013591508082111561177d578485fd5b6117898c838d01611399565b909750955060a08b01359150808211156117a1578485fd5b506117ae8b828c01611399565b999c989b50969995989497949560c00135949350505050565b6000602082840312156117d8578081fd5b5051919050565b600081518084526117f7816020860160208601611ed0565b601f01601f19169290920160200192915050565b6000828483379101908152919050565b6000825161182d818460208701611ed0565b9190910192915050565b60008451611849818460208901611ed0565b60609490941b6bffffffffffffffffffffffff191691909301908152601481019190915260340192915050565b600080835460018082166000811461189557600181146118ac576118db565b60ff198316865260028304607f16860193506118db565b600283048786526020808720875b838110156118d35781548a8201529085019082016118ba565b505050860193505b509195945050505050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b818110156119545783516001600160a01b03168352928401929184019160010161192f565b50909695505050505050565b901515815260200190565b90815260200190565b93845260208401929092526040830152606082015260800190565b93845260ff9290921660208401526040830152606082015260800190565b600060208252610aa260208301846117df565b6000608082526119d360808301876117df565b6020830195909552506001600160a01b03929092166040830152606090910152919050565b600060808252611a0b60808301886117df565b602083810188905260408401879052838203606085015284825285918101835b86811015611a59578383016001600160a01b03611a488287611382565b168352935090820190600101611a2b565b509998505050505050505050565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604082015261647360f01b606082015260800190565b602080825260119082015270696e76616c6964207369676e617475726560781b604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601b908201527f616d6f756e7420657863656564206d617820616c6c6f77616e63650000000000604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252601f908201527f6b656570726520686173206e6f7420656e6f75676820636f6c6c617465726c00604082015260600190565b60208082526016908201527519dc9bdd5c081a5908185b1c9958591e48195e1a5cdd60521b604082015260600190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b6020808252601290820152716e6f7420656e6f756768206b65657065727360701b604082015260600190565b60208082526018908201527f7265636569707420616c72656164792076657269666965640000000000000000604082015260600190565b6020808252601a908201527f67726f75702062616c616e6365206973206e6f7420656d707479000000000000604082015260600190565b6020808252601190820152707265636569707420697320696e2075736560781b604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526015908201527435b2b2b832b91034b99034b71031b7b7b63237bbb760591b604082015260600190565b60208082526016908201527506b6565706572206973206e6f7420696e2067726f75760541b604082015260600190565b6020808252601690820152756578636565642067726f757020616c6c6f77616e636560501b604082015260600190565b60208082526017908201527f616d6f756e742030206973206e6f7420616c6c6f776564000000000000000000604082015260600190565b60006020825260018060a01b038351166020830152602083015160408301526040830151606083015260608301516080830152608083015160a083015260a083015160058110611e7357fe5b8060c08401525060c083015160e0808401526115bd6101008401826117df565b9283526020830191909152604082015260600190565b60405181810167ffffffffffffffff81118282101715611ec857600080fd5b604052919050565b60005b83811015611eeb578181015183820152602001611ed3565b83811115611efa576000848401525b5050505056fe4d696e74526571756573742862797465733332207265636569707449642c6279746573333220747849642c75696e743235362068656967687429a26469706673582212200421b79f464fb44c3502b2f921ffe1aae9d2c5e90d75478f4ea95e161477153d64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 290,
        "contract": "contracts/DeCusSystem.sol:DeCusSystem",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2326,
        "contract": "contracts/DeCusSystem.sol:DeCusSystem",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3988,
        "contract": "contracts/DeCusSystem.sol:DeCusSystem",
        "label": "chainId",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3994,
        "contract": "contracts/DeCusSystem.sol:DeCusSystem",
        "label": "verifyingContract",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 4015,
        "contract": "contracts/DeCusSystem.sol:DeCusSystem",
        "label": "EIP712_DOMAIN_HASH",
        "offset": 0,
        "slot": "3",
        "type": "t_bytes32"
      },
      {
        "astId": 4135,
        "contract": "contracts/DeCusSystem.sol:DeCusSystem",
        "label": "verified",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 2438,
        "contract": "contracts/DeCusSystem.sol:DeCusSystem",
        "label": "minKeeperSatoshi",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 2440,
        "contract": "contracts/DeCusSystem.sol:DeCusSystem",
        "label": "eBTC",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IEBTC)3819"
      },
      {
        "astId": 2442,
        "contract": "contracts/DeCusSystem.sol:DeCusSystem",
        "label": "keeperRegistry",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IKeeperRegistry)3874"
      },
      {
        "astId": 2446,
        "contract": "contracts/DeCusSystem.sol:DeCusSystem",
        "label": "groups",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_string_memory_ptr,t_struct(Group)3736_storage)"
      },
      {
        "astId": 2450,
        "contract": "contracts/DeCusSystem.sol:DeCusSystem",
        "label": "receipts",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_bytes32,t_struct(Receipt)3757_storage)"
      },
      {
        "astId": 2454,
        "contract": "contracts/DeCusSystem.sol:DeCusSystem",
        "label": "cooldownUntil",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IEBTC)3819": {
        "encoding": "inplace",
        "label": "contract IEBTC",
        "numberOfBytes": "20"
      },
      "t_contract(IKeeperRegistry)3874": {
        "encoding": "inplace",
        "label": "contract IKeeperRegistry",
        "numberOfBytes": "20"
      },
      "t_enum(Status)3742": {
        "encoding": "inplace",
        "label": "enum IDeCusSystem.Status",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(Receipt)3757_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct IDeCusSystem.Receipt)",
        "numberOfBytes": "32",
        "value": "t_struct(Receipt)3757_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_struct(Group)3736_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct IDeCusSystem.Group)",
        "numberOfBytes": "32",
        "value": "t_struct(Group)3736_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)2092_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 2091,
            "contract": "contracts/DeCusSystem.sol:DeCusSystem",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1827_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Group)3736_storage": {
        "encoding": "inplace",
        "label": "struct IDeCusSystem.Group",
        "members": [
          {
            "astId": 3729,
            "contract": "contracts/DeCusSystem.sol:DeCusSystem",
            "label": "required",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3731,
            "contract": "contracts/DeCusSystem.sol:DeCusSystem",
            "label": "maxSatoshi",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3733,
            "contract": "contracts/DeCusSystem.sol:DeCusSystem",
            "label": "currSatoshi",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3735,
            "contract": "contracts/DeCusSystem.sol:DeCusSystem",
            "label": "keeperSet",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(AddressSet)2092_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Receipt)3757_storage": {
        "encoding": "inplace",
        "label": "struct IDeCusSystem.Receipt",
        "members": [
          {
            "astId": 3744,
            "contract": "contracts/DeCusSystem.sol:DeCusSystem",
            "label": "recipient",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3746,
            "contract": "contracts/DeCusSystem.sol:DeCusSystem",
            "label": "amountInSatoshi",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3748,
            "contract": "contracts/DeCusSystem.sol:DeCusSystem",
            "label": "createTimestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3750,
            "contract": "contracts/DeCusSystem.sol:DeCusSystem",
            "label": "txId",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes32"
          },
          {
            "astId": 3752,
            "contract": "contracts/DeCusSystem.sol:DeCusSystem",
            "label": "height",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 3754,
            "contract": "contracts/DeCusSystem.sol:DeCusSystem",
            "label": "status",
            "offset": 0,
            "slot": "5",
            "type": "t_enum(Status)3742"
          },
          {
            "astId": 3756,
            "contract": "contracts/DeCusSystem.sol:DeCusSystem",
            "label": "btcAddress",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Set)1827_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1822,
            "contract": "contracts/DeCusSystem.sol:DeCusSystem",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1826,
            "contract": "contracts/DeCusSystem.sol:DeCusSystem",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}