{
  "address": "0xe764C67AbdCC21C7400e399B95F1E7F22e9a2ce7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_assets",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_eBTC",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "AssetAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "treasury",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Confiscated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "keeper",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "KeeperAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "keeper",
          "type": "address"
        }
      ],
      "name": "KeeperDeleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "keepers",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[][]",
          "name": "keeperAmounts",
          "type": "uint256[][]"
        }
      ],
      "name": "KeeperImported",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousTreasury",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newTreasury",
          "type": "address"
        }
      ],
      "name": "TreasuryTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "addAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "addKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "collaterals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        }
      ],
      "name": "confiscate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "confiscations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "keeper",
          "type": "address"
        }
      ],
      "name": "deleteKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eBTC",
      "outputs": [
        {
          "internalType": "contract IEBTC",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "keeper",
          "type": "address"
        }
      ],
      "name": "getCollateralValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ebtcAmount",
          "type": "uint256"
        }
      ],
      "name": "offsetOverissue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "overissuedTotal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "perUserCollateral",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "keepers",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "overissuedAmount",
          "type": "uint256"
        }
      ],
      "name": "punishKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newTreasury",
          "type": "address"
        }
      ],
      "name": "updateTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2432d1052349936a36fcb9ccd3ad5b75a955ec0b8a1201da120a5c59e868fb41",
  "receipt": {
    "to": null,
    "from": "0xf09B8dda559292111Af945e91717dA39eEF34Ade",
    "contractAddress": "0xe764C67AbdCC21C7400e399B95F1E7F22e9a2ce7",
    "transactionIndex": 1,
    "gasUsed": "1238946",
    "logsBloom": "0x
    "blockHash": "0xe002005cdbfbeec316e84bea4728e6fa695918b160c93f51e5925512b39785da",
    "transactionHash": "0x2432d1052349936a36fcb9ccd3ad5b75a955ec0b8a1201da120a5c59e868fb41",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 24692203,
        "transactionHash": "0x2432d1052349936a36fcb9ccd3ad5b75a955ec0b8a1201da120a5c59e868fb41",
        "address": "0xe764C67AbdCC21C7400e399B95F1E7F22e9a2ce7",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f09b8dda559292111af945e91717da39eef34ade"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0xe002005cdbfbeec316e84bea4728e6fa695918b160c93f51e5925512b39785da"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 24692203,
        "transactionHash": "0x2432d1052349936a36fcb9ccd3ad5b75a955ec0b8a1201da120a5c59e868fb41",
        "address": "0xe764C67AbdCC21C7400e399B95F1E7F22e9a2ce7",
        "topics": [
          "0x0e3c58ebfb2e7465fbb1c32e6b4f40c3c4f5ca77e8218a386aff8617831260d7",
          "0x000000000000000000000000affcb62b108d0b726a9f93aae8e1967ad105ee47"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0xe002005cdbfbeec316e84bea4728e6fa695918b160c93f51e5925512b39785da"
      }
    ],
    "blockNumber": 24692203,
    "cumulativeGasUsed": "1398971",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0xAFFcb62b108D0b726a9F93aAE8e1967aD105ee47"
    ],
    "0xcEf0F2F34f9736c3Ca6Be3A444aB8358a0978040"
  ],
  "solcInputHash": "bacc995f75dbe5332b0cad8b3c08e62c",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_eBTC\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"AssetAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Confiscated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"KeeperAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"}],\"name\":\"KeeperDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"keepers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[][]\",\"name\":\"keeperAmounts\",\"type\":\"uint256[][]\"}],\"name\":\"KeeperImported\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousTreasury\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"TreasuryTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"addAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"collaterals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"}],\"name\":\"confiscate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"confiscations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"}],\"name\":\"deleteKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eBTC\",\"outputs\":[{\"internalType\":\"contract IEBTC\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"}],\"name\":\"getCollateralValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ebtcAmount\",\"type\":\"uint256\"}],\"name\":\"offsetOverissue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"overissuedTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"perUserCollateral\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"keepers\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"overissuedAmount\",\"type\":\"uint256\"}],\"name\":\"punishKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"updateTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/KeeperRegistry.sol\":\"KeeperRegistry\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0x363bd3b45201f07c9b71c2edc96533468cf14a3d029fabd82fddceb1eb3ebd9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x1562cd9922fbf739edfb979f506809e2743789cbde3177515542161c3d04b164\",\"license\":\"MIT\"},\"contracts/KeeperRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport {IKeeperRegistry} from \\\"./interfaces/IKeeperRegistry.sol\\\";\\nimport {IEBTC} from \\\"./interfaces/IEBTC.sol\\\";\\nimport {BtcUtility} from \\\"./utils/BtcUtility.sol\\\";\\n\\ninterface IERC20Extension {\\n    function decimals() external returns (uint8);\\n}\\n\\ncontract KeeperRegistry is Ownable, IKeeperRegistry {\\n    using Math for uint256;\\n    using SafeMath for uint256;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    IEBTC public eBTC;\\n    address public treasury;\\n\\n    EnumerableSet.AddressSet assetSet;\\n    mapping(address => mapping(address => uint256)) public collaterals;\\n    mapping(address => address) public perUserCollateral;\\n\\n    uint256 public overissuedTotal;\\n    mapping(address => uint256) public confiscations;\\n\\n    constructor(address[] memory _assets, address _eBTC) public {\\n        for (uint256 i = 0; i < _assets.length; i++) {\\n            _addAsset(_assets[i]);\\n        }\\n        eBTC = IEBTC(_eBTC);\\n    }\\n\\n    function getCollateralValue(address keeper) external view override returns (uint256) {\\n        return collaterals[keeper][perUserCollateral[keeper]];\\n    }\\n\\n    function addAsset(address asset) external onlyOwner {\\n        _addAsset(asset);\\n    }\\n\\n    function addKeeper(address asset, uint256 amount) external {\\n        // transfer assets\\n        require(assetSet.contains(asset), \\\"assets not accepted\\\");\\n        require(perUserCollateral[msg.sender] == address(0), \\\"keeper already exist\\\");\\n        require(IERC20(asset).transferFrom(msg.sender, address(this), amount), \\\"transfer failed\\\");\\n\\n        _addKeeper(msg.sender, asset, amount);\\n    }\\n\\n    function deleteKeeper(address keeper) external onlyOwner {\\n        // require admin role because we need to make sure keeper is not in any working groups\\n        address asset = perUserCollateral[keeper];\\n        require(IERC20(asset).approve(keeper, collaterals[keeper][asset]), \\\"approve failed\\\");\\n        delete collaterals[keeper][asset];\\n        delete perUserCollateral[keeper];\\n\\n        emit KeeperDeleted(keeper);\\n    }\\n\\n    // TODO: each keeper only have one non-zero asset\\n    /*function importKeepers(\\n        address[] calldata assets,\\n        address[] calldata keepers,\\n        uint256[][] calldata keeperAmounts\\n    ) external override {\\n        require(keeperAmounts.length == keepers.length, \\\"amounts length does not match\\\");\\n        require(keeperAmounts[0].length == assets.length, \\\"amounts length does not match\\\");\\n\\n        // transfer\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            require(assetSet.contains(assets[i]), \\\"assets not accepted\\\");\\n            uint256 sumAmounts = 0;\\n            for (uint256 j = 0; j < keepers.length; j++) {\\n                sumAmounts = sumAmounts.add(keeperAmounts[i][j]);\\n            }\\n            require(\\n                ERC20(assets[i]).transferFrom(msg.sender, address(this), sumAmounts),\\n                \\\"transfer failed\\\"\\n            );\\n        }\\n\\n        // add keeper\\n        for (uint256 i = 0; i < keepers.length; i++) {\\n            _addKeeper(keepers[i], assets, keeperAmounts[i]);\\n        }\\n\\n        emit KeeperImported(msg.sender, assets, keepers, keeperAmounts);\\n    }*/\\n\\n    function punishKeeper(address[] calldata keepers, uint256 overissuedAmount) external onlyOwner {\\n        for (uint256 i = 0; i < keepers.length; i++) {\\n            address keeper = keepers[i];\\n            address asset = perUserCollateral[keeper];\\n            uint256 collateral = collaterals[keeper][asset];\\n\\n            if (asset == address(eBTC)) {\\n                uint256 deduction = overissuedAmount.min(collateral);\\n                eBTC.burn(deduction);\\n                overissuedAmount = overissuedAmount.sub(deduction);\\n                collateral = collateral.sub(deduction);\\n            }\\n\\n            confiscations[asset] = confiscations[asset].add(collateral);\\n            delete collaterals[keeper][asset];\\n        }\\n\\n        overissuedTotal = overissuedTotal.add(overissuedAmount);\\n    }\\n\\n    function updateTreasury(address newTreasury) external onlyOwner {\\n        emit TreasuryTransferred(treasury, newTreasury);\\n        treasury = newTreasury;\\n    }\\n\\n    function confiscate(address[] calldata assets) external {\\n        require(treasury != address(0), \\\"treasury not up yet\\\");\\n\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            uint256 confiscation = confiscations[assets[i]];\\n            require(IERC20(assets[i]).transfer(treasury, confiscation), \\\"transfer failed\\\");\\n            emit Confiscated(treasury, assets[i], confiscation);\\n            delete confiscations[assets[i]];\\n        }\\n    }\\n\\n    function offsetOverissue(uint256 ebtcAmount) external {\\n        eBTC.burnFrom(msg.sender, ebtcAmount);\\n        overissuedTotal = overissuedTotal.sub(ebtcAmount);\\n    }\\n\\n    function _addAsset(address asset) private {\\n        assetSet.add(asset);\\n        emit AssetAdded(asset);\\n    }\\n\\n    function _addKeeper(\\n        address keeper,\\n        address asset,\\n        uint256 amount\\n    ) private {\\n        uint256 divisor = BtcUtility.getSatoshiDivisor(IERC20Extension(asset).decimals());\\n        collaterals[keeper][asset] = amount.mul(divisor);\\n        perUserCollateral[keeper] = asset;\\n\\n        emit KeeperAdded(keeper, asset, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x70d0ca80b54c5fdcf200f6e867c7330fa0d3fb88f777680f10124712c98907a8\",\"license\":\"MIT\"},\"contracts/interfaces/IEBTC.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IEBTC is IERC20 {\\n    function mint(address to, uint256 amount) external;\\n\\n    function burn(uint256 amount) external;\\n\\n    function burnFrom(address account, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xec5cedd6709fa64c88f3cb272bb38ae3623c617d10cfdf8fccac4241df779867\",\"license\":\"MIT\"},\"contracts/interfaces/IKeeperRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface IKeeperRegistry {\\n    function getCollateralValue(address keeper) external view returns (uint256);\\n\\n    /*function importKeepers(\\n        address[] calldata assets,\\n        address[] calldata keepers,\\n        uint256[][] calldata keeperAmounts\\n    ) external;*/\\n\\n    event AssetAdded(address indexed asset);\\n\\n    event KeeperAdded(address indexed keeper, address asset, uint256 amount);\\n    event KeeperDeleted(address indexed keeper);\\n    event KeeperImported(\\n        address indexed from,\\n        address[] assets,\\n        address[] keepers,\\n        uint256[][] keeperAmounts\\n    );\\n\\n    event TreasuryTransferred(address indexed previousTreasury, address indexed newTreasury);\\n    event Confiscated(address indexed treasury, address asset, uint256 amount);\\n}\\n\",\"keccak256\":\"0x01189b7dadcd84967e8711c9b498a9dbef8280887d779e5a0cfa3bf6c468c50e\",\"license\":\"MIT\"},\"contracts/utils/BtcUtility.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\nlibrary BtcUtility {\\n    uint256 public constant ERC20_DECIMAL = 18;\\n\\n    //    function getBTCDecimal() external pure returns (uint256) { return BTC_DECIMAL; }\\n\\n    function getSatoshiMultiplierForEBTC() internal pure returns (uint256) {\\n        return 1e10;\\n    }\\n\\n    function getSatoshiDivisor(uint256 decimal) internal pure returns (uint256) {\\n        require(ERC20_DECIMAL >= decimal, \\\"asset decimal not supported\\\");\\n\\n        uint256 res = 10**uint256(ERC20_DECIMAL - decimal);\\n        require(res > 0, \\\"Power overflow\\\");\\n\\n        return res;\\n    }\\n}\\n\",\"keccak256\":\"0x076e7e44801f3516036c200728bd05e28b3956d00dcc6ed5f21fa947122aaf30\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200162b3803806200162b8339810160408190526200003491620001e3565b600062000040620000ed565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35060005b8251811015620000c557620000bc838281518110620000a857fe5b6020026020010151620000f160201b60201c565b6001016200008d565b50600180546001600160a01b0319166001600160a01b039290921691909117905550620002d5565b3390565b6200010c8160036200014460201b62000bc41790919060201c565b506040516001600160a01b038216907f0e3c58ebfb2e7465fbb1c32e6b4f40c3c4f5ca77e8218a386aff8617831260d790600090a250565b60006200015b836001600160a01b03841662000164565b90505b92915050565b6000620001728383620001b3565b620001aa575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556200015e565b5060006200015e565b60009081526001919091016020526040902054151590565b80516001600160a01b03811681146200015e57600080fd5b60008060408385031215620001f6578182fd5b82516001600160401b03808211156200020d578384fd5b818501915085601f83011262000221578384fd5b81518181111562000230578485fd5b6020915081810262000244838201620002ae565b8281528381019085850183870186018b10156200025f578889fd5b8896505b848710156200028d57620002788b82620001cb565b83526001969096019591850191850162000263565b5080975050505050620002a386828701620001cb565b925050509250929050565b6040518181016001600160401b0381118282101715620002cd57600080fd5b604052919050565b61134680620002e56000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c8063715018a6116100a2578063d209793b11610071578063d209793b146101ed578063da3f6c2414610200578063e51e119e14610208578063ee529bff1461021b578063f2fde38b1461022e5761010b565b8063715018a6146101b75780637f51bb1f146101bf5780638da5cb5b146101d257806397904e42146101da5761010b565b80635f447e04116100de5780635f447e041461017457806361d027b31461018957806368dcc4991461019157806371101871146101a45761010b565b80631df398a214610110578063298410e5146101395780633e7a68231461014e5780635e63edde14610161575b600080fd5b61012361011e366004610ef8565b610241565b6040516101309190611307565b60405180910390f35b61014c610147366004610ef8565b610253565b005b61014c61015c366004610f71565b6102a7565b61014c61016f366004610f47565b61049a565b61017c6105a4565b6040516101309190611054565b61017c6105b3565b61014c61019f366004610fb1565b6105c2565b61014c6101b2366004610ef8565b61077c565b61014c6108ea565b61014c6101cd366004610ef8565b610973565b61017c610a0e565b6101236101e8366004610ef8565b610a1d565b61017c6101fb366004610ef8565b610a4e565b610123610a69565b610123610216366004610f13565b610a6f565b61014c61022936600461101b565b610a8c565b61014c61023c366004610ef8565b610b04565b60086020526000908152604090205481565b61025b610be2565b6001600160a01b031661026c610a0e565b6001600160a01b03161461029b5760405162461bcd60e51b815260040161029290611272565b60405180910390fd5b6102a481610be6565b50565b6002546001600160a01b03166102cf5760405162461bcd60e51b815260040161029290611204565b60005b81811015610495576000600860008585858181106102ec57fe5b90506020020160208101906103019190610ef8565b6001600160a01b03166001600160a01b0316815260200190815260200160002054905083838381811061033057fe5b90506020020160208101906103459190610ef8565b60025460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb9261037892911690859060040161108c565b602060405180830381600087803b15801561039257600080fd5b505af11580156103a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ca9190610ffb565b6103e65760405162461bcd60e51b8152600401610292906112a7565b6002546001600160a01b03167f1d47c187095aefccfdebc8a872d270e98511c7814959be6a804c25428d7fff7985858581811061041f57fe5b90506020020160208101906104349190610ef8565b8360405161044392919061108c565b60405180910390a26008600085858581811061045b57fe5b90506020020160208101906104709190610ef8565b6001600160a01b031681526020810191909152604001600090812055506001016102d2565b505050565b6104a5600383610c29565b6104c15760405162461bcd60e51b8152600401610292906110a5565b336000908152600660205260409020546001600160a01b0316156104f75760405162461bcd60e51b81526004016102929061114f565b6040516323b872dd60e01b81526001600160a01b038316906323b872dd9061052790339030908690600401611068565b602060405180830381600087803b15801561054157600080fd5b505af1158015610555573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105799190610ffb565b6105955760405162461bcd60e51b8152600401610292906112a7565b6105a0338383610c3e565b5050565b6001546001600160a01b031681565b6002546001600160a01b031681565b6105ca610be2565b6001600160a01b03166105db610a0e565b6001600160a01b0316146106015760405162461bcd60e51b815260040161029290611272565b60005b8281101561076657600084848381811061061a57fe5b905060200201602081019061062f9190610ef8565b6001600160a01b0380821660009081526006602090815260408083205460058352818420908516808552925290912054600154939450909290911682141561070357600061067d8683610d51565b600154604051630852cd8d60e31b81529192506001600160a01b0316906342966c68906106ae908490600401611307565b600060405180830381600087803b1580156106c857600080fd5b505af11580156106dc573d6000803e3d6000fd5b505050506106f38187610d6790919063ffffffff16565b95506106ff8282610d67565b9150505b6001600160a01b0382166000908152600860205260409020546107269082610d8f565b6001600160a01b03928316600081815260086020908152604080832094909455959094168452600585528184209084529093525090812055600101610604565b506007546107749082610d8f565b600755505050565b610784610be2565b6001600160a01b0316610795610a0e565b6001600160a01b0316146107bb5760405162461bcd60e51b815260040161029290611272565b6001600160a01b03808216600090815260066020908152604080832054600583528184209416808452939091529081902054905163095ea7b360e01b8152829163095ea7b39161080f91869160040161108c565b602060405180830381600087803b15801561082957600080fd5b505af115801561083d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108619190610ffb565b61087d5760405162461bcd60e51b8152600401610292906111dc565b6001600160a01b03808316600081815260056020908152604080832094861683529381528382208290558282526006905282812080546001600160a01b0319169055915190917f5d27a2180685c533af64d224ad0f39b644017f0f0a22497a0fe29f7d7450674a91a25050565b6108f2610be2565b6001600160a01b0316610903610a0e565b6001600160a01b0316146109295760405162461bcd60e51b815260040161029290611272565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b61097b610be2565b6001600160a01b031661098c610a0e565b6001600160a01b0316146109b25760405162461bcd60e51b815260040161029290611272565b6002546040516001600160a01b038084169216907febebcc22237fa047dcfebf54b185ec126c9b24d45f4bd2a18e4fa02e07308c4090600090a3600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031690565b6001600160a01b03908116600090815260056020908152604080832060068352818420549094168352929052205490565b6006602052600090815260409020546001600160a01b031681565b60075481565b600560209081526000928352604080842090915290825290205481565b60015460405163079cc67960e41b81526001600160a01b03909116906379cc679090610abe903390859060040161108c565b600060405180830381600087803b158015610ad857600080fd5b505af1158015610aec573d6000803e3d6000fd5b5050600754610afe9250905082610d67565b60075550565b610b0c610be2565b6001600160a01b0316610b1d610a0e565b6001600160a01b031614610b435760405162461bcd60e51b815260040161029290611272565b6001600160a01b038116610b695760405162461bcd60e51b8152600401610292906110d2565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000610bd9836001600160a01b038416610db4565b90505b92915050565b3390565b610bf1600382610bc4565b506040516001600160a01b038216907f0e3c58ebfb2e7465fbb1c32e6b4f40c3c4f5ca77e8218a386aff8617831260d790600090a250565b6000610bd9836001600160a01b038416610dfe565b6000610cbe836001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610c7e57600080fd5b505af1158015610c92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb69190611033565b60ff16610e16565b9050610cca8282610e5e565b6001600160a01b038086166000818152600560209081526040808320948916808452948252808320959095558282526006905283902080546001600160a01b03191690921790915590517f9cb76b51144d46005efa8364e8e73c13bed396c03ba2a905e9817b4a1011614f90610d43908690869061108c565b60405180910390a250505050565b6000818310610d605781610bd9565b5090919050565b600082821115610d895760405162461bcd60e51b81526004016102929061117d565b50900390565b600082820183811015610bd95760405162461bcd60e51b815260040161029290611118565b6000610dc08383610dfe565b610df657508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610bdc565b506000610bdc565b60009081526001919091016020526040902054151590565b60008160121015610e395760405162461bcd60e51b8152600401610292906112d0565b6012829003600a0a80610bdc5760405162461bcd60e51b8152600401610292906111b4565b600082610e6d57506000610bdc565b82820282848281610e7a57fe5b0414610bd95760405162461bcd60e51b815260040161029290611231565b80356001600160a01b0381168114610bdc57600080fd5b60008083601f840112610ec0578182fd5b50813567ffffffffffffffff811115610ed7578182fd5b6020830191508360208083028501011115610ef157600080fd5b9250929050565b600060208284031215610f09578081fd5b610bd98383610e98565b60008060408385031215610f25578081fd5b610f2f8484610e98565b9150610f3e8460208501610e98565b90509250929050565b60008060408385031215610f59578182fd5b610f638484610e98565b946020939093013593505050565b60008060208385031215610f83578182fd5b823567ffffffffffffffff811115610f99578283fd5b610fa585828601610eaf565b90969095509350505050565b600080600060408486031215610fc5578081fd5b833567ffffffffffffffff811115610fdb578182fd5b610fe786828701610eaf565b909790965060209590950135949350505050565b60006020828403121561100c578081fd5b81518015158114610bd9578182fd5b60006020828403121561102c578081fd5b5035919050565b600060208284031215611044578081fd5b815160ff81168114610bd9578182fd5b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b602080825260139082015272185cdcd95d1cc81b9bdd081858d8d95c1d1959606a1b604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252601490820152731ad9595c195c88185b1c9958591e48195e1a5cdd60621b604082015260600190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b6020808252600e908201526d506f776572206f766572666c6f7760901b604082015260600190565b6020808252600e908201526d185c1c1c9bdd994819985a5b195960921b604082015260600190565b6020808252601390820152721d1c99585cdd5c9e481b9bdd081d5c081e595d606a1b604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252600f908201526e1d1c985b9cd9995c8819985a5b1959608a1b604082015260600190565b6020808252601b908201527f617373657420646563696d616c206e6f7420737570706f727465640000000000604082015260600190565b9081526020019056fea2646970667358221220171735047450a589b162aa903de4ca75373f3960f02842f94b17901c93309a6264736f6c634300060c0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 290,
        "contract": "contracts/KeeperRegistry.sol:KeeperRegistry",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3274,
        "contract": "contracts/KeeperRegistry.sol:KeeperRegistry",
        "label": "eBTC",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IEBTC)3819"
      },
      {
        "astId": 3276,
        "contract": "contracts/KeeperRegistry.sol:KeeperRegistry",
        "label": "treasury",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 3278,
        "contract": "contracts/KeeperRegistry.sol:KeeperRegistry",
        "label": "assetSet",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(AddressSet)2092_storage"
      },
      {
        "astId": 3284,
        "contract": "contracts/KeeperRegistry.sol:KeeperRegistry",
        "label": "collaterals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 3288,
        "contract": "contracts/KeeperRegistry.sol:KeeperRegistry",
        "label": "perUserCollateral",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 3290,
        "contract": "contracts/KeeperRegistry.sol:KeeperRegistry",
        "label": "overissuedTotal",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 3294,
        "contract": "contracts/KeeperRegistry.sol:KeeperRegistry",
        "label": "confiscations",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IEBTC)3819": {
        "encoding": "inplace",
        "label": "contract IEBTC",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)2092_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 2091,
            "contract": "contracts/KeeperRegistry.sol:KeeperRegistry",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1827_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)1827_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1822,
            "contract": "contracts/KeeperRegistry.sol:KeeperRegistry",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1826,
            "contract": "contracts/KeeperRegistry.sol:KeeperRegistry",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}